import googleapiclient.discovery
from pprint import pprint
import pandas as pd
import psycopg2
import streamlit as st
import pymongo
api_key = 'AIzaSyACxX4YYxHbMHygM9kAycd-1jICKsOUj5Y'

c_ids = ["UCQqmjKQBKQkRbWbSntYJX0Q",  #shabarinath premlal
        "UCwr-evhuzGZgDFrq_1pLt_A",   #Error Makes Clever Academy
        "UC3LD42rjj-Owtxsa6PwGU5Q",   #Streamlit
        "UCBO4dcbTf4o6KMcozI19n7w",   #Opera Rock Beats
        "UCDrf0V4fcBr5FlCtKwvpfwA",   #College Wallah
        "UCeVMnSShP_Iviwkknt83cww",   #CodeWithHarry
        "UCeBWU9awHX3WPR7chSCoE0g",   #Tamil Diet Studio
        "UCUdGWc162Tc2nwl8rfd6org",   #ThaniOruval Vlog
        "UC0KMy2IyOb8BHz05Kxz-YCQ",   #Sethu
        "UCNEJaQkjX05D22MNS5Pa2eA",]  #Music Booth

youtube = googleapiclient.discovery.build(
        'youtube', 'v3', developerKey= api_key)

def get_channel (youtube,c_ids):     # channel ids = c_ids
    youtube_data=[]
    request = youtube.channels().list(
        part="snippet,contentDetails,statistics",
        id= ",".join(c_ids))     #in this we are converting list to string so we use , and join method
    response = request.execute()

    for i in range(len(response['items'])):
        data = dict(Name= response['items'][i]['snippet']['title'],
               url= response['items'][i]['snippet']['customUrl'],
               publishedAt = response['items'][i]['snippet']['publishedAt'],
               thumbnails = response['items'][i]['snippet']['thumbnails'],
               statistics = response['items'][i]['statistics']['hiddenSubscriberCount'],
               subscriberCount = response['items'][i]['statistics']['subscriberCount'],
               videoCount = response['items'][i]['statistics']['videoCount'],
               viewCount = response['items'][i]['statistics']['viewCount'],
               playlist_id = response['items'][i]['contentDetails']['relatedPlaylists']['uploads'])
        youtube_data.append(data)

    return youtube_data

get_channel (youtube,c_ids)
channel_object = get_channel(youtube,c_ids)   #creating an object called channel_object fro a function to call a data frame
channel_frame = pd.DataFrame(channel_object)  #creating an object for dataframe and pass the function into the object
channel_frame

playlist_id = channel_frame.loc[channel_frame['Name']== 'Sethu','playlist_id'].iloc[0]
playlist_id
## fuunction to get video ids ##
def get_video_ids(youtube,playlist_id):
       request = youtube.playlistItems().list(
          part = 'ContentDetails',
          playlistId = playlist_id,
          maxResults = 50 )
       response = request.execute()
       video_ids = []
       for i in range(len(response['items'])):
         video_ids.append(response['items'][i]['contentDetails']['videoId'])

       next_page_token = response.get('next_page_token')
       more_pages = True
       while more_pages:
           if next_page_token is None:
            more_pages = False
           else:
            request = youtube.playlistItems().list(
              part = 'ContentDetails',
              playlistId = playlist_id,
              maxResults = 50 )
            response = request.execute()
            video_ids = []
            for i in range(len(response['items'])):
             video_ids.append(response['items'][i]['contentDetails']['videoId'])
            next_page_token = response.get('next_page_token')
       return (video_ids)
video_ids = get_video_ids(youtube,playlist_id)
video_ids

#Fuctions to get video details#

def get_video_details(youtube,video_ids):

    request = youtube.videos().list(
        part="snippet,contentDetails,statistics",
        id= ','.join(video_ids)
    )
    response = request.execute()
    full_video_details = []
    for video in response['items']:
      video_details = dict(Title = video['snippet']['title'],
                           Published_at = video['snippet']['publishedAt'],
                           viewCount = video['statistics']['viewCount'],
                           like_count = video['statistics']['likeCount'],
                           fav_count = video['statistics']['favoriteCount'],
                           comment_count = video['statistics']['commentCount'])
      full_video_details.append(video_details)



    return (full_video_details)

get_video_details(youtube,video_ids)
video_part = get_video_details(youtube,video_ids)
video_frame = pd.DataFrame(video_part)
video_frame

####FUNCTION TO GET COMMENT DETAILS####


def get_comment_details(youtube,video_ids):
    comment_list = []
    for video_id in video_ids:
        try:
            request = youtube.commentThreads().list(part='snippet', videoId=video_id, maxResults=50)
            response = request.execute()

            for item in response["items"]:
                 comment_details = {
                        'comment_id': item['snippet']['topLevelComment']['id'],
                        'video_id': video_id,
                        'comment_text': item['snippet']['topLevelComment']['snippet']['textDisplay'],
                        'comment_author': item['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                        'commented_on': item['snippet']['topLevelComment']['snippet']['publishedAt']
                        }
                 comment_list.append(comment_details)
        except :
            continue
    return comment_list

cmt_details = get_comment_details(youtube,video_ids)
cmt = pd.DataFrame(cmt_details)
cmt

## DATA STORED IN MONGO DB 
## pip install pymongo
## install pymongo
client = pymongo.MongoClient("mongodb+srv://naren_1995:narendran@cluster0.unvoqct.mongodb.net/?retryWrites=true&w=majority")
db = client["youtube_project"]
col = db["Channelid"]

def channel_Details(channel_id):
    channel = youtube_channel(youtube, channel_id)
    col = db["Channelid"]
    col.insert_one(channel)

    playlist = get_playlists(youtube, channel_id)
    col = db["playlists"]
    for i in playlist:
        col.insert_one(i)

    upload = channel.get('playlistId')
    videos = channel_videoId(youtube, upload)
    for video in videos:
        v = video_details(youtube, video)
        col = db["videos"]
        col.insert_one(v)
        com = get_comments_in_videos(youtube, video)
        if com != 'Could not get comments for video ':
            for comment in com:
                col = db["comments"]
                col.insert_one(comment)

    return "store in mongodb"

## data migrated to sql database 
def channel_table():
    try:
        cursor.execute("""create table if not exists channel
                         (channel_id varchar (100),
                          channel_name varchar(220),
                          channel_launch_date float,
                          channel_description varchar(300),
                          channel_views int,
                          channel_subscription int,
                          channel_video_count int,
                          channel_playlist_id varchar(150)""")
        client.commit()
   except:
        client.rollback()
    db = client["youtube_project"]
    col = db["Channels"]
    data = col.find()
    doc = list(data)
    df = pd.DataFrame(doc)
    try:
       for _, cha_nel in df.iterrows():  # iterate through each records
            insert_query = '''
                INSERT INTO channel (channelName, channelId, subscribers, views, totalVideos, playlistId, channel_description)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            '''
            values = (
                cha_nel['channelName'],
                cha_nel['channel_id'],
                cha_nel['subscribers'],
                cha_nel['views'],
                cha_nel['totalVideos'],
                cha_nel['playlistId'],
                cha_nel['channel_description']
            )
            try:
                cursor.execute(insert_query, values)
                client.commit()
            except:
                client.rollback()
    except:
        st.write("values already exist in channels table")


# # table for playlist
def playlist_table():
     try:
        cursor.execute("""create table if not exists playlists
               (PlaylistId varchar(80) primary key,
                Title varchar(100),
                ChannelId varchar(100),
                ChannelName varchar(50),
                PublishedAt timestamp,
                VideoCount int)""")
        client.commit()
     except:
        project.rollback()

    col1 = db["playlists"]
    data1 = col1.find()
    doc1 = list(data1)
    df1 = pd.DataFrame(doc1)
    try:
        for _, play_list in df1.iterrows():
            insert_query = '''
                            INSERT INTO playlists (PlaylistId, Title, ChannelId, ChannelName, PublishedAt, VideoCount)
                            VALUES (%s, %s, %s, %s, %s, %s)  '''

            values = (
                play_list['PlaylistId'],
                play_list['Title'],
                play_list['ChannelId'],
                play_list['ChannelName'],
                play_list['PublishedAt'],
                play_list['VideoCount']
            )
            try:
                cursor.execute(insert_query, values)
                client.commit()
            except:
                client.rollback()
    except:
        st.write("values already exist in playlist table")

    # # table for videos


def videos_table():
     try:
        cursor.execute("""create table if not exists videos
                        (video_id varchar(50)  primary key,
                        channelTitle varchar(150),
                        title varchar(150),
                        description text,
                        tags text,
                        publishedAt timestamp,
                        viewCount bigint,
                        likeCount bigint,
                        favoriteCount bigint,
                        commentCount int,
                        duration interval,
                        definition varchar(10),
                        caption varchar(10),
                        ChannelId varchar(100))""")
        client.commit()
     except:
        client.rollback()
    col2 = db["videos"]
    data2 = col2.find()
    doc2 = list(data2)
    df2 = pd.DataFrame(doc2)
    try:
        for _, vid_eos in df2.iterrows():
            insert_query = '''
                INSERT INTO videos (video_id, channelTitle,  title, description, tags, publishedAt, 
                viewCount, likeCount, favoriteCount, commentCount, duration, definition, caption, channelId)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)

            '''
            values = (
                vid_eos['video_id'],
                vid_eos['channelTitle'],
                vid_eos['title'],
                vid_eos['description'],
                vid_eos['tags'],
                vid_eos['publishedAt'],
                vid_eos['viewCount'],
                vid_eos['likeCount'],
                vid_eos['favoriteCount'],
                vid_eos['commentCount'],
                vid_eos['duration'],
                vid_eos['definition'],
                vid_eos['caption'],
                vid_eos['channelId']
            )
            try:
                cursor.execute(insert_query, values)
                client.commit()
            except:
                client.rollback()
    except:
        st.write("values aready exists in the videos table")


# # table for comments
def comments_table():
     try:
        cursor.execute("""create table if not exists comments
               (comment_id varchar(100)  primary key,
               comment_txt text,
               videoId varchar(80),
               author_name varchar(150),
               published_at timestamp)""")
        client.commit()
     except:
        project.rollback()

    col3 = db["comments"]
    data3 = col3.find()
    doc3 = list(data3)
    df3 = pd.DataFrame(doc3)
    try:
        for _, com in df3.iterrows():
            insert_query = '''
                INSERT INTO comments (comment_id, comment_txt, videoId, author_name, published_at)
                VALUES (%s, %s, %s, %s, %s)
                '''
            values = (
                com['comment_id'],
                com['comment_txt'],
                com['videoId'],
                com['author_name'],
                com['published_at']
            )
            try:
                cursor.execute(insert_query, values)
                client.commit()
            except:
                client.rollback()
    except:
        st.write("values already exist in comments table")
def tables():
  channel_table()
  playlist_table()
  videos_table()
  comments_table()
  return ("done")

## streamlit created using the above option
st.title(":rainbow[YOUTUBE DATA HARVESTING AND WAREHOUSING]")

st.markdown(":grey[Enter The Channel ID From youtube]")
channel_ids = c_ids
channel_ids = channel_ids.split(',')
channel_ids = [ch.strip() for ch in channel_ids if ch]


submit1=st.button("collect and store data in MongoDb")
if submit1:
  for channel in channel_ids:
        query = {'channel_id': channel}
        document = col.find_one(query)
        if document:
            st.write("channel details already exists")
        else:
          output = channel_Details(channel)
        st.write(output)
st.subheader(":rainbow[EXTRACT TO POSTGRESQL TABLE]")
st.caption("Mongodb to extract to store in sql table")
submit2=st.button("migrate data from MongoDb to Sql")
if submit2:
        display = tables()
        st.write(display)
st.subheader(":rainbow[Channel Data Analysis]")
st.caption("Qustions All Are Given Below")


query = st.selectbox("",("none", "What are the names of all the videos and their corresponding channels?",
                         "Which channels have the most number of videos, and how many videos do they have?",
                          "What are the top 10 most viewed videos and their respective channels?",
                         "How many comments were made on each video, and what are theircorresponding video names?",
                         "Which videos have the highest number of likes, and what are their corresponding channel names?",
                          "What is the total number of likes and dislikes for each video, and what are their corresponding video names?",
                         "What is the total number of views for each channel, and what are their corresponding channel names?",
                         "What are the names of all the channels that have published videos in the year2022?",
                          "What is the average duration of all videos in each channel, and what are their corresponding channel names?",
                         "Which videos have the highest number of comments, and what are their corresponding channel names?"))
if query == "none":
        st.write("select an option")
if query == "What are the names of all the videos and their corresponding channels?":
  cursor.execute("select channeltitle as channel_name, title as videos from videos;")
    client.commit()
    t1 = cursor.fetchall()
    st.write(pd.DataFrame(t1, columns=["channel_name", "videos"]))
if query == "Which channels have the most number of videos, and how many videos do they have?":
  cursor.execute(
        "select channelName as ChannelName,totalvideos as No_of_Videos from channel order by totalvideos desc;")
    client.commit()
    t2 = cursor.fetchall()
    st.write(pd.DataFrame(t2, columns=["ChannelName", "No_of_Videos"]))
if query == "What are the top 10 most viewed videos and their respective channels?":
  cursor.execute('''select  channeltitle as ChannelName,title as video_title ,viewcount as views from videos 
                            where viewcount is not null order by viewcount desc limit 10;''')
    client.commit()
    t3 = cursor.fetchall()
    st.write(pd.DataFrame(t3, columns=["ChannelName", "video_title", "views"]))
if query == "How many comments were made on each video, and what are theircorresponding video names?":
  cursor.execute("select title as Name , commentcount as No_of_comments  from videos where commentcount is not null;")
    client.commit()
    t4 = cursor.fetchall()
    st.write(pd.DataFrame(t4, columns=["Name", "No_of_comments"]))
if query == "Which videos have the highest number of likes, and what are their corresponding channel names?":
  cursor.execute('''select channeltitle as ChannelName, title as Video_name, likecount as Likes from videos 
                       where likecount is not null order by likecount desc;''')
    client.commit()
    t5 = cursor.fetchall()
    st.write(pd.DataFrame(t5, columns=["ChannelName", "Video_name", "Likes"]))
if query == "What is the total number of likes and dislikes for each video, and what are their corresponding video names?":
  cursor.execute('''select title as Video, likeCount as likes from videos;''')
    client.commit()
    t6 = cursor.fetchall()
    st.write(pd.DataFrame(t6, columns=["Video", "likes"]))
if query == "What is the total number of views for each channel, and what are their corresponding channel names?":
  cursor.execute("select channelName as ChannelName, views as Channelviews from channel;")
    client.commit()
    t7 = cursor.fetchall()
    st.write(pd.DataFrame(t7, columns=["ChannelName", "Channelviews"]))
if query == "What are the names of all the channels that have published videos in the year2022?":
  cursor.execute('''select channeltitle as ChannelName , title as Video_name, publishedat as Posted_On from videos 
                       where extract(year from publishedat) = 2022;''')
    client.commit()
    t8 = cursor.fetchall()
    st.write(pd.DataFrame(t8, columns=["ChannelName", "Video_name", "Posted_On"]))
if query == "What is the average duration of all videos in each channel, and what are their corresponding channel names?":
  cursor.execute(
        """SELECT channeltitle as ChannelName, AVG(duration) AS average_duration FROM videos GROUP BY channeltitle;""")
    client.commit()
    t9 = cursor.fetchall()
    t9 = pd.DataFrame(t9, columns=["ChannelName", "average_duration"])
    tb9 = []
    for _, row in t9.iterrows():
        Channel_Name = row["ChannelName"]
        avg_duration = row["average_duration"]
        avg_str = str(avg_duration)
        tb9.append({"ChannelName": Channel_Name, "average_duration": avg_str})
    st.write(pd.DataFrame(tb9))
if query == "Which videos have the highest number of comments, and what are their corresponding channel names?":
  cursor.execute('''select channelTitle as ChannelName, title as Video_name, commentCount as Comments from videos 
                       where commentCount is not null order by commentCount desc;''')
    client.commit()
    t10 = cursor.fetchall()
    st.write(pd.DataFrame(t10, columns=["ChannelName", "Video_name", "Comments"]))
                
